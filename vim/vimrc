scriptencoding utf-8
set encoding=utf-8

set number relativenumber 
syntax on
hi SpecialKey ctermfg=240
hi nonText ctermfg=240
hi LineNr ctermfg=107
hi CursorLine cterm=NONE ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE
hi CursorLineNR cterm=NONE ctermbg=NONE ctermfg=191 guibg=NONE guifg=NONE
set cursorline
set autowrite
set smartindent
set splitright
set splitbelow
set undodir=~/.vim/undodir
set undofile

nmap <C-p> :Fz<CR>

" Because of mistyping
:command W write

:command Q :q!

" Wrap by word

:set wrap linebreak nolist

" Insert end-bracket automatically

" inoremap { {<CR>}<Esc>ko

" Mouse support on Option (Alt) M (Mac)

if has('mouse')
	nmap <silent>µ :call functions#changeMouseSetting()<CR>
endif

set mouse=a

function! Run()
	:w 
	let path = expand('%:p')
	if system(printf('head -c2 %s', path)) == '#!' 
		:vnew | read ! #:p
	else 
		echom "This language is not supported for automated compiling and running"
	endif
endfunction

nnoremap <S-u> <C-r>
nnoremap <C-r><C-r> :call Run()<CR>
nnoremap <C-r><C-p> :! chmod 755 %:p <CR> :call Run()<CR>

" Adding vim/after to runtimepath (because of ftplugins)

set runtimepath+=$DOTFILES/vim/after

filetype plugin on

"and command-c to copy to clipboard support

vnoremap <D-c> "+y
noremap <D-v> "+p
noremap <D-V> "+P

" Backspace (in insert mode)

set backspace=indent,eol,start

" Set wrap (don't break a long line)

set wrap!

" Spell checking

set spelllang=en_us,hu

" Smart case

set smartcase

" Set tab to 4 space

set tabstop=4
set shiftwidth=4

" Sources (includes)

so ~/.dotfiles/vim/plugins.vim
so ~/.dotfiles/vim/functions.vim
so ~/.dotfiles/vim/ale.vim
so ~/.dotfiles/vim/lsp.vim
so ~/.dotfiles/vim/telescope.vim

" Shift-j and Shift-k to scroll 

nnoremap <S-j> <C-E>
nnoremap <S-k> <C-Y>

" Shortcut to modify list (whitespaces)

map <silent> <C-q> :call functions#modifyWhiteSpacesAndNumbers()<CR>

" Shortcut to modify tab to spaces and back

" Window managemant

nmap <silent> <C-h> :call functions#WinMove('h')<CR>
nmap <silent> <C-j> :call functions#WinMove('j')<CR>
nmap <silent> <C-k> :call functions#WinMove('k')<CR>
nmap <silent> <C-l> :call functions#WinMove('l')<CR>

" <Alt+hjkl> keys on macOS
noremap <silent> ˙ :vertical resize +3<CR>
noremap <silent> ¬ :vertical resize -3<CR>
noremap <silent> ˚ :resize +3<CR>
noremap <silent> ∆ :resize -3<CR>

" Change 2 split windows from vert to horiz or horiz to vert
map <C-w>gv <C-w>t<C-w>H
map <C-w>gh <C-w>t<C-w>K

set fillchars+=vert:\ 

" Terminal in vim

nmap <C-w>tt :vnew term://zsh<CR>

" Tab managemant

map <F8> :tabe 
map <F7> :tabp<CR>
map <F9> :tabn<CR>

" map Ctrl-e to open . folder

noremap <silent> <C-e> :e .<CR>

" Unmaping arrow keys
" Just for learning :)

map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>


" Markdown title shortcuts

map g1 :call functions#MainTitleMD()<CR>
map g2 :call functions#SecondTitleMD()<CR>
map g3 :call functions#ThirdTitleMD()<CR>

" Tag jumping config

command! MakeTags !ctags -R .
" command! MakeTags !ctags .

" whitespaces

set listchars=tab:>\ 
set listchars+=eol:¬
set listchars+=space:.
set list

" Ctrl-P

let g:ctrlp_max_files=0

" Ctrl-C to show/hide ColorColum

nmap <C-c> :call functions#ColorColumSetter()<CR>
hi ColorColumn ctermbg=18

" Ctrl-S to unhighlight search results

nnoremap <silent> <C-s> :nohl<CR><C-l>

" NerdTree

map <C-n> :NERDTreeToggle<CR>

" Custom Lightline

so ~/.dotfiles/themes/base16.vim

set foldenable
set foldlevelstart=10  " default folding level when buffer is opened
set foldnestmax=10     " maximum nested fold
set foldmethod=syntax  " fold based on indentation

set laststatus=2
if !has('gui_running')
    set t_Co=256
endif
set noshowmode
let g:lightline = {
\   'active': {
\       'left': [ [ 'mode', 'paste' ],
\               [ 'gitbranch' ],
\               [ 'readonly', 'filetype', 'filename' ]],
\       'right': [ [ 'percent' ], [ 'lineinfo' ],
\               [ 'fileformat', 'fileencoding' ],
\               [ 'linter_errors', 'linter_warnings' ]]
\   },
\   'component_expand': {
\       'linter': 'LightlineLinter',
\       'linter_warnings': 'LightlineLinterWarnings',
\       'linter_errors': 'LightlineLinterErrors',
\       'linter_ok': 'LightlineLinterOk'
\   },
\   'component_type': {
\       'readonly': 'error',
\       'linter_warnings': 'warning',
\       'linter_errors': 'error'
\   },
\   'component_function': {
\       'filename': 'functions#lightlineFilename',
\       'filetype': 'functions#lightlineFileType',
\       'gitbranch': 'gitbranch#name'
\   },
\   'tabline': {
\       'left': [ [ 'tabs' ] ],
\       'right': [ [ 'close' ] ]
\   },
\   'tab': {
\       'active': [ 'filename', 'modified' ],
\       'inactive': [ 'filename', 'modified' ],
\   },
\   'separator': { 'left': "\uE0B0", 'right': "\uE0B2" },
\   'subseparator': { 'left': "|", 'right': "|" }
\ }
